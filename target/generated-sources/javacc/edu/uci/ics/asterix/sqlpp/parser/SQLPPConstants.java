/* Generated By:JavaCC: Do not edit this line. SQLPPConstants.java */
package edu.uci.ics.asterix.sqlpp.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SQLPPConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SELECT = 1;
  /** RegularExpression Id. */
  int FROM = 2;
  /** RegularExpression Id. */
  int WHERE = 3;
  /** RegularExpression Id. */
  int AS = 4;
  /** RegularExpression Id. */
  int JOIN = 5;
  /** RegularExpression Id. */
  int ON = 6;
  /** RegularExpression Id. */
  int INNER = 7;
  /** RegularExpression Id. */
  int OUTER = 8;
  /** RegularExpression Id. */
  int LEFT = 9;
  /** RegularExpression Id. */
  int RIGHT = 10;
  /** RegularExpression Id. */
  int FULL = 11;
  /** RegularExpression Id. */
  int CARET = 12;
  /** RegularExpression Id. */
  int DIV = 13;
  /** RegularExpression Id. */
  int IDIV = 14;
  /** RegularExpression Id. */
  int MINUS = 15;
  /** RegularExpression Id. */
  int MOD = 16;
  /** RegularExpression Id. */
  int MUL = 17;
  /** RegularExpression Id. */
  int PLUS = 18;
  /** RegularExpression Id. */
  int LEFTPAREN = 19;
  /** RegularExpression Id. */
  int RIGHTPAREN = 20;
  /** RegularExpression Id. */
  int LEFTBRACKET = 21;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 22;
  /** RegularExpression Id. */
  int COLON = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int DOT = 25;
  /** RegularExpression Id. */
  int QUES = 26;
  /** RegularExpression Id. */
  int LT = 27;
  /** RegularExpression Id. */
  int GT = 28;
  /** RegularExpression Id. */
  int LE = 29;
  /** RegularExpression Id. */
  int GE = 30;
  /** RegularExpression Id. */
  int EQ = 31;
  /** RegularExpression Id. */
  int NE = 32;
  /** RegularExpression Id. */
  int SIMILAR = 33;
  /** RegularExpression Id. */
  int ASSIGN = 34;
  /** RegularExpression Id. */
  int AND = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 37;
  /** RegularExpression Id. */
  int NULL = 38;
  /** RegularExpression Id. */
  int TRUE = 39;
  /** RegularExpression Id. */
  int FALSE = 40;
  /** RegularExpression Id. */
  int MISSING = 41;
  /** RegularExpression Id. */
  int DIGIT = 42;
  /** RegularExpression Id. */
  int DOUBLE_LITERAL = 43;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 44;
  /** RegularExpression Id. */
  int DIGITS = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int SPECIALCHARS = 47;
  /** RegularExpression Id. */
  int STRING_LITERAL = 48;
  /** RegularExpression Id. */
  int EscapeQuot = 49;
  /** RegularExpression Id. */
  int EscapeApos = 50;
  /** RegularExpression Id. */
  int EscapeBslash = 51;
  /** RegularExpression Id. */
  int EscapeSlash = 52;
  /** RegularExpression Id. */
  int EscapeBspace = 53;
  /** RegularExpression Id. */
  int EscapeFormf = 54;
  /** RegularExpression Id. */
  int EscapeNl = 55;
  /** RegularExpression Id. */
  int EscapeCr = 56;
  /** RegularExpression Id. */
  int EscapeTab = 57;
  /** RegularExpression Id. */
  int IDENTIFIER = 58;
  /** RegularExpression Id. */
  int VARIABLE = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"select\"",
    "\"from\"",
    "\"where\"",
    "\"as\"",
    "\"join\"",
    "\"on\"",
    "\"inner\"",
    "\"outer\"",
    "\"left\"",
    "\"right\"",
    "\"full\"",
    "\"^\"",
    "\"/\"",
    "\"idiv\"",
    "\"-\"",
    "\"%\"",
    "\"*\"",
    "\"+\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"?\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"~=\"",
    "\":=\"",
    "\"and\"",
    "\"or\"",
    "<INTEGER_LITERAL>",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"missing\"",
    "<DIGIT>",
    "<DOUBLE_LITERAL>",
    "<FLOAT_LITERAL>",
    "<DIGITS>",
    "<LETTER>",
    "<SPECIALCHARS>",
    "<STRING_LITERAL>",
    "\"\\\\\\\"\"",
    "\"\\\\\\\'\"",
    "\"\\\\\\\\\"",
    "\"\\\\/\"",
    "\"\\\\b\"",
    "\"\\\\f\"",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\t\"",
    "<IDENTIFIER>",
    "<VARIABLE>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 64>",
    "<token of kind 65>",
    "\";\"",
  };

}
