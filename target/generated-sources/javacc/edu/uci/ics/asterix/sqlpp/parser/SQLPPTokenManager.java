/* SQLPPTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SQLPPTokenManager.java */
package edu.uci.ics.asterix.sqlpp.parser;
import java.util.List;
import java.util.ArrayList;
import edu.uci.ics.asterix.sqlpp.base.AbstractStatement;
import edu.uci.ics.asterix.sqlpp.statement.SQLPPQuery;
import edu.uci.ics.asterix.sqlpp.base.AbstractExpression;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPOperatorExpr;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPUnaryExpr;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPUnaryExpr.Sign;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPValueExpression;
import edu.uci.ics.asterix.sqlpp.base.AbstractValue;
import edu.uci.ics.asterix.sqlpp.value.DoubleValue;
import edu.uci.ics.asterix.sqlpp.value.FalseValue;
import edu.uci.ics.asterix.sqlpp.value.FloatValue;
import edu.uci.ics.asterix.sqlpp.value.IntegerValue;
import edu.uci.ics.asterix.sqlpp.value.LongValue;
import edu.uci.ics.asterix.sqlpp.value.MissingValue;
import edu.uci.ics.asterix.sqlpp.value.StringValue;
import edu.uci.ics.asterix.sqlpp.value.NullValue;
import edu.uci.ics.asterix.sqlpp.value.TrueValue;

/** Token Manager. */
@SuppressWarnings("unused")public class SQLPPTokenManager implements SQLPPConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000L) != 0L)
            return 46;
         if ((active0 & 0x7b000009fffffeL) != 0L)
         {
            jjmatchedKind = 71;
            return 26;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 54;
         return -1;
      case 1:
         if ((active0 & 0x200000002300cL) != 0L)
            return 26;
         if ((active0 & 0x79000009fdcff2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 26;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000000004402L) != 0L)
            return 26;
         if ((active0 & 0x78000009ff8bf0L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 26;
         }
         return -1;
      case 3:
         if ((active0 & 0x18000009300140L) != 0L)
            return 26;
         if ((active0 & 0x60000000cf8ab0L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 26;
         }
         return -1;
      case 4:
         if ((active0 & 0x20000000c28a20L) != 0L)
            return 26;
         if ((active0 & 0x400000000d0090L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
            return 26;
         }
         return -1;
      case 5:
         if ((active0 & 0x50000L) != 0L)
            return 26;
         if ((active0 & 0x40000000080090L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 26;
         }
         return -1;
      case 6:
         if ((active0 & 0x80080L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 26;
         }
         if ((active0 & 0x40000000000010L) != 0L)
            return 26;
         return -1;
      case 7:
         if ((active0 & 0x80L) != 0L)
            return 26;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 26;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 37:
         return jjStopAtPos(0, 29);
      case 40:
         return jjStopAtPos(0, 32);
      case 41:
         return jjStopAtPos(0, 33);
      case 42:
         return jjStopAtPos(0, 30);
      case 43:
         return jjStopAtPos(0, 31);
      case 44:
         return jjStopAtPos(0, 37);
      case 45:
         return jjStopAtPos(0, 28);
      case 46:
         return jjStartNfaWithStates_0(0, 38, 54);
      case 47:
         return jjStartNfaWithStates_0(0, 26, 46);
      case 58:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 59:
         return jjStopAtPos(0, 79);
      case 60:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 61:
         return jjStopAtPos(0, 44);
      case 62:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 63:
         return jjStopAtPos(0, 39);
      case 91:
         return jjStopAtPos(0, 34);
      case 93:
         return jjStopAtPos(0, 35);
      case 94:
         return jjStopAtPos(0, 25);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000000006L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xf0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000000000400L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8003000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000030000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x180000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000200000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1800000L);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000080010L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x44060L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000001008080L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000400000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100400L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000020800L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 2, 26);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 121:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 1, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00200L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x108000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 26);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000001c0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x10c0010L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 99:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 26);
         break;
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 26);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 26);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x88000L);
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 26);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 26);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400020L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800200L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000010000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40800L);
      case 118:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 26);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000080L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 26);
         break;
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 26);
         break;
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 26);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 26);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80010L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 26);
         break;
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000080L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (curChar == 47)
                  {
                     if (kind > 78)
                        kind = 78;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 37); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(43); }
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddStates(3, 11); }
                  }
                  else if ((0x201000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  else if (curChar == 47)
                     { jjAddStates(12, 13); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(43, 44); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(14, 16); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 1:
               case 5:
                  if (curChar == 34)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 3:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 7:
                  if (curChar == 47)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 13:
               case 17:
                  if (curChar == 39)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 14:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 15:
                  if (curChar == 39 && kind > 61)
                     kind = 61;
                  break;
               case 19:
                  if (curChar == 47)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 26:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddStates(3, 11); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if (curChar == 46)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 39:
                  if (curChar == 46)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 37); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(43); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 37); }
                  break;
               case 45:
                  if (curChar == 47)
                     { jjAddStates(12, 13); }
                  break;
               case 47:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar == 10 && kind > 77)
                     kind = 77;
                  break;
               case 49:
                  if (curChar != 47)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 52:
                  if (curChar == 10 && kind > 78)
                     kind = 78;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     { jjCheckNAdd(26); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 4:
                  if (curChar == 92)
                     { jjAddStates(20, 27); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 8:
                  if (curChar == 98)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 9:
                  if (curChar == 102)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 10:
                  if (curChar == 110)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 11:
                  if (curChar == 114)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 12:
                  if (curChar == 116)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 16:
                  if (curChar == 92)
                     { jjAddStates(28, 35); }
                  break;
               case 18:
                  if (curChar == 92)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 20:
                  if (curChar == 98)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 21:
                  if (curChar == 102)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 22:
                  if (curChar == 110)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 23:
                  if (curChar == 114)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 24:
                  if (curChar == 116)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(26); }
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAdd(29); }
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAdd(29); }
                  break;
               case 37:
                  if ((0x4000000040L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 47:
                  { jjAddStates(36, 37); }
                  break;
               case 50:
                  if (kind > 78)
                     kind = 78;
                  { jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(17, 19); }
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(14, 16); }
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(36, 37); }
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   50, 51, 53, 31, 32, 33, 34, 36, 37, 38, 39, 41, 46, 49, 14, 15, 
   16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 
   21, 22, 23, 24, 47, 48, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\141\163\143", "\141\164", "\142\171", "\144\141\164\141\163\145\164", 
"\144\145\143\157\162", "\144\145\163\143", "\144\151\163\164\151\156\143\164", "\145\154\163\145", 
"\145\166\145\162\171", "\146\157\162", "\147\162\157\165\160", "\151\146", "\151\156", 
"\154\145\164", "\154\151\155\151\164", "\157\146\146\163\145\164", "\157\162\144\145\162", 
"\162\145\164\165\162\156", "\163\141\164\151\163\146\151\145\163", "\163\157\155\145", 
"\164\150\145\156", "\165\156\151\157\156", "\167\150\145\162\145", "\167\151\164\150", "\136", 
"\57", "\151\144\151\166", "\55", "\45", "\52", "\53", "\50", "\51", "\133", "\135", 
"\72", "\54", "\56", "\77", "\74", "\76", "\74\75", "\76\75", "\75", "\41\75", 
"\176\75", "\72\75", "\141\156\144", "\157\162", null, "\156\165\154\154", 
"\164\162\165\145", "\146\141\154\163\145", "\155\151\163\163\151\156\147", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\73", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SQLPPTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SQLPPTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 54; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x377fffffffffffffL, 0x8180L, 
};
static final long[] jjtoSkip = {
   0x0L, 0x7e00L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[54];
    private final int[] jjstateSet = new int[2 * 54];

    
    protected char curChar;
}
