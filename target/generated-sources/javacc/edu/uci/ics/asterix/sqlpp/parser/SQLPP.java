/* SQLPP.java */
/* Generated By:JavaCC: Do not edit this line. SQLPP.java */
 package edu.uci.ics.asterix.sqlpp.parser;

import java.util.List;
import java.util.ArrayList;
import edu.uci.ics.asterix.sqlpp.base.AbstractStatement;
import edu.uci.ics.asterix.sqlpp.statement.SQLPPQuery;
import edu.uci.ics.asterix.sqlpp.base.AbstractExpression;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPOperatorExpr;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPUnaryExpr;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPUnaryExpr.Sign;
import edu.uci.ics.asterix.sqlpp.expression.SQLPPValueExpression;
import edu.uci.ics.asterix.sqlpp.base.AbstractValue;
import edu.uci.ics.asterix.sqlpp.value.DoubleValue;
import edu.uci.ics.asterix.sqlpp.value.FalseValue;
import edu.uci.ics.asterix.sqlpp.value.FloatValue;
import edu.uci.ics.asterix.sqlpp.value.IntegerValue;
import edu.uci.ics.asterix.sqlpp.value.LongValue;
import edu.uci.ics.asterix.sqlpp.value.MissingValue;
import edu.uci.ics.asterix.sqlpp.value.StringValue;
import edu.uci.ics.asterix.sqlpp.value.NullValue;
import edu.uci.ics.asterix.sqlpp.value.TrueValue;
import edu.uci.ics.asterix.sqlpp.parser.AbstractParser;


public class SQLPP extends AbstractParser implements SQLPPConstants {
    public static void main(String[] args) throws Exception {
        List<AbstractStatement> result = new SQLPP(new java.io.StringReader(args[0])).Statements();
        for (AbstractStatement stmt : result) {
            SQLPPQuery q = (SQLPPQuery) stmt;
            System.out.println(q);
        }
    }

/**
 * Comments are ignored, nothing about what is inside comments is done.
 */
//<DEFAULT>
//SKIP:
//{
//    <"/*"> { pushState(); } : INSIDE_COMMENT
//}
//
//<INSIDE_COMMENT> SPECIAL : {
//<"+" (" ")* (~["*"])*>
//}
//
//   
//<INSIDE_COMMENT> SKIP : {
//"/*" : {
//}
//
//   
//<INSIDE_COMMENT> SKIP : {
//"*/" : {
//| <~[]>
//}

/**
 * Rules
 */
//TODO: Fix the multiple statement initiation.
  final public List<AbstractStatement> Statements() throws ParseException {List<AbstractStatement> statements = new ArrayList<AbstractStatement>();
        AbstractStatement statement;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUS:
      case INTEGER_LITERAL:
      case NULL:
      case TRUE:
      case FALSE:
      case MISSING:
      case DOUBLE_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      statement = SingleStatement();
statements.add(statement);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 79:{
        jj_consume_token(79);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractStatement SingleStatement() throws ParseException {AbstractStatement stmt;
    stmt = Query();
{if ("" != null) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public SQLPPQuery Query() throws ParseException {SQLPPQuery q = new SQLPPQuery(); AbstractExpression e;
    e = SQLPPOperatorExpression();
    jj_consume_token(0);
q.setBody(e);
                {if ("" != null) return q;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression SQLPPOperatorExpression() throws ParseException, ParseException {SQLPPOperatorExpr op = null;
  AbstractExpression operand = null;
    operand = AndExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
if (op == null) {
            op = new SQLPPOperatorExpr();
            op.addOperand(operand);
          }
      op.addOperator(token.image);
      operand = AndExpr();
op.addOperand(operand);
    }
{if ("" != null) return op==null? operand: op;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression AndExpr() throws ParseException, ParseException {SQLPPOperatorExpr op = null;
  AbstractExpression operand = null;
    operand = RelExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
if (op == null) {
            op = new SQLPPOperatorExpr();
            op.addOperand(operand);
          }
      op.addOperator(token.image);
      operand = RelExpr();
op.addOperand(operand);
    }
{if ("" != null) return op==null? operand: op;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression RelExpr() throws ParseException, ParseException {SQLPPOperatorExpr op = null;
  AbstractExpression operand = null;
    operand = AddExpr();
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        break;
        }
      case SIMILAR:{
        jj_consume_token(SIMILAR);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if (op == null) {
              op = new SQLPPOperatorExpr();
              op.addOperand(operand);
            }
        op.addOperator(token.image);
      operand = AddExpr();
op.addOperand(operand);
    } else {
      ;
    }
{if ("" != null) return op==null? operand: op;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression AddExpr() throws ParseException, ParseException {SQLPPOperatorExpr op = null;
  AbstractExpression operand = null;
    operand = MultExpr();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if (op == null) {
            op = new SQLPPOperatorExpr();
        op.addOperand(operand);
          }
          op.addOperator(token.image);
      operand = MultExpr();
op.addOperand(operand);
    }
{if ("" != null) return op==null? operand: op;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression MultExpr() throws ParseException, ParseException {SQLPPOperatorExpr op = null;
  AbstractExpression operand = null;
    operand = UnaryExpr();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CARET:
      case DIV:
      case IDIV:
      case MOD:
      case MUL:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        jj_consume_token(MUL);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      case CARET:{
        jj_consume_token(CARET);
        break;
        }
      case IDIV:{
        jj_consume_token(IDIV);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if (op == null) {
            op = new SQLPPOperatorExpr();
        op.addOperand(operand);
          }
          op.addOperator(token.image);
      operand = UnaryExpr();
op.addOperand(operand);
    }
{if ("" != null) return op==null?operand:op;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression UnaryExpr() throws ParseException, ParseException {SQLPPUnaryExpr uexpr = null;
        AbstractExpression expr = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case PLUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
uexpr = new SQLPPUnaryExpr();
                if("+".equals(token.image))
                        uexpr.setSign(Sign.POSITIVE);
                else if("-".equals(token.image))
                        uexpr.setSign(Sign.NEGATIVE);
                else
                        {if (true) throw new ParseException();}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    expr = ValueExpr();
if(uexpr!=null){
                        uexpr.setExpr(expr);
                        {if ("" != null) return uexpr;}
                }
                else{
                        {if ("" != null) return expr;}
                }
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression ValueExpr() throws ParseException, ParseException {AbstractExpression expr = null;
    expr = Value();
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractExpression Value() throws ParseException, ParseException {SQLPPValueExpression expr = new SQLPPValueExpression();
  String str = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
expr.setValue(new StringValue(removeQuotesAndEscapes(token.image)));
      break;
      }
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
try {
                expr.setValue(new IntegerValue(new Integer(token.image)));
        } catch (NumberFormatException e) {
                expr.setValue(new LongValue(new Long(token.image)));
        }
      break;
      }
    case FLOAT_LITERAL:{
      jj_consume_token(FLOAT_LITERAL);
expr.setValue(new FloatValue(new Integer(token.image)));
      break;
      }
    case DOUBLE_LITERAL:{
      jj_consume_token(DOUBLE_LITERAL);
expr.setValue(new DoubleValue(new Double(token.image)));
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
expr.setValue(new NullValue());
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
expr.setValue(new TrueValue());
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
expr.setValue(new FalseValue());
      break;
      }
    case MISSING:{
      jj_consume_token(MISSING);
expr.setValue(new MissingValue());
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(MISSING)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SQLPPTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x90000000,0x0,0x0,0x0,0x0,0x90000000,0x90000000,0x6e000000,0x6e000000,0x90000000,0x90000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x237c0000,0x0,0x20000,0x10000,0x7f00,0x0,0x0,0x0,0x0,0x0,0x0,0x237c0000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLPP(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLPP(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLPP(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLPPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLPP(SQLPPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLPPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[80];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 80; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
